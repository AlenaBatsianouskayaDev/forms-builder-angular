{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/38093/Desktop/projects/forms-builder-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TestBed } from '@angular/core/testing';\nimport { RegistrationFormComponent } from './registration-form.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nfdescribe('RegistrationFormComponent', () => {\n  let component;\n  let fixture;\n  let controlU;\n  let controlP;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, StoreModule.forRoot({})],\n      declarations: [RegistrationFormComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(RegistrationFormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    controlU = component.registrationForm.get('username');\n    controlP = component.registrationForm.get('password');\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should create form with 2 controls', () => {\n    expect(component.registrationForm.contains('username')).toBe(true);\n    expect(component.registrationForm.contains('password')).toBe(true);\n  });\n  it('should mark controls as invalid if empty value', () => {\n    controlU === null || controlU === void 0 ? void 0 : controlU.setValue('');\n    controlP === null || controlP === void 0 ? void 0 : controlP.setValue('');\n    expect(controlU === null || controlU === void 0 ? void 0 : controlU.valid).toBeFalsy();\n    expect(controlP === null || controlP === void 0 ? void 0 : controlP.valid).toBeFalsy();\n  });\n  it('should mark password as invalid if value length less 5', () => {\n    controlP === null || controlP === void 0 ? void 0 : controlP.setValue('1234');\n    expect(controlP === null || controlP === void 0 ? void 0 : controlP.valid).toBeFalsy();\n  });\n});","map":{"version":3,"sources":["C:/Users/38093/Desktop/projects/forms-builder-angular/src/app/components/registration-form/registration-form.component.spec.ts"],"names":["TestBed","RegistrationFormComponent","ReactiveFormsModule","StoreModule","fdescribe","component","fixture","controlU","controlP","beforeEach","configureTestingModule","imports","forRoot","declarations","compileComponents","createComponent","componentInstance","detectChanges","registrationForm","get","it","expect","toBeTruthy","contains","toBe","setValue","valid","toBeFalsy"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACAC,SAAS,CAAC,2BAAD,EAA8B,MAAM;AACzC,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMT,OAAO,CAACU,sBAAR,CAA+B;AACjCC,MAAAA,OAAO,EAAE,CACLT,mBADK,EAELC,WAAW,CAACS,OAAZ,CAAoB,EAApB,CAFK,CADwB;AAKjCC,MAAAA,YAAY,EAAE,CAACZ,yBAAD;AALmB,KAA/B,EAODa,iBAPC,EAAN;AAQH,GATS,EAAV;AAUAL,EAAAA,UAAU,CAAC,MAAM;AACbH,IAAAA,OAAO,GAAGN,OAAO,CAACe,eAAR,CAAwBd,yBAAxB,CAAV;AACAI,IAAAA,SAAS,GAAGC,OAAO,CAACU,iBAApB;AACAV,IAAAA,OAAO,CAACW,aAAR;AACAV,IAAAA,QAAQ,GAAGF,SAAS,CAACa,gBAAV,CAA2BC,GAA3B,CAA+B,UAA/B,CAAX;AACAX,IAAAA,QAAQ,GAAGH,SAAS,CAACa,gBAAV,CAA2BC,GAA3B,CAA+B,UAA/B,CAAX;AACH,GANS,CAAV;AAOAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAAChB,SAAD,CAAN,CAAkBiB,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,oCAAD,EAAuC,MAAM;AAC3CC,IAAAA,MAAM,CAAChB,SAAS,CAACa,gBAAV,CAA2BK,QAA3B,CAAoC,UAApC,CAAD,CAAN,CAAwDC,IAAxD,CAA6D,IAA7D;AACAH,IAAAA,MAAM,CAAChB,SAAS,CAACa,gBAAV,CAA2BK,QAA3B,CAAoC,UAApC,CAAD,CAAN,CAAwDC,IAAxD,CAA6D,IAA7D;AACH,GAHC,CAAF;AAIAJ,EAAAA,EAAE,CAAC,gDAAD,EAAmD,MAAM;AACvDb,IAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACkB,QAAT,CAAkB,EAAlB,CAApD;AACAjB,IAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACiB,QAAT,CAAkB,EAAlB,CAApD;AACAJ,IAAAA,MAAM,CAACd,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACmB,KAA9D,CAAN,CAA2EC,SAA3E;AACAN,IAAAA,MAAM,CAACb,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACkB,KAA9D,CAAN,CAA2EC,SAA3E;AACH,GALC,CAAF;AAMAP,EAAAA,EAAE,CAAC,wDAAD,EAA2D,MAAM;AAC/DZ,IAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACiB,QAAT,CAAkB,MAAlB,CAApD;AACAJ,IAAAA,MAAM,CAACb,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACkB,KAA9D,CAAN,CAA2EC,SAA3E;AACH,GAHC,CAAF;AAIH,CAvCQ,CAAT","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { RegistrationFormComponent } from './registration-form.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { StoreModule } from '@ngrx/store';\r\nfdescribe('RegistrationFormComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let controlU;\r\n    let controlP;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            imports: [\r\n                ReactiveFormsModule,\r\n                StoreModule.forRoot({}),\r\n            ],\r\n            declarations: [RegistrationFormComponent]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(RegistrationFormComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n        controlU = component.registrationForm.get('username');\r\n        controlP = component.registrationForm.get('password');\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('should create form with 2 controls', () => {\r\n        expect(component.registrationForm.contains('username')).toBe(true);\r\n        expect(component.registrationForm.contains('password')).toBe(true);\r\n    });\r\n    it('should mark controls as invalid if empty value', () => {\r\n        controlU === null || controlU === void 0 ? void 0 : controlU.setValue('');\r\n        controlP === null || controlP === void 0 ? void 0 : controlP.setValue('');\r\n        expect(controlU === null || controlU === void 0 ? void 0 : controlU.valid).toBeFalsy();\r\n        expect(controlP === null || controlP === void 0 ? void 0 : controlP.valid).toBeFalsy();\r\n    });\r\n    it('should mark password as invalid if value length less 5', () => {\r\n        controlP === null || controlP === void 0 ? void 0 : controlP.setValue('1234');\r\n        expect(controlP === null || controlP === void 0 ? void 0 : controlP.valid).toBeFalsy();\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}